{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOUFkUHke5OzgUS50RSJJmf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/maryammomtahen/TestDataset_Subject-37_Post7_Unhealthy_Slices/blob/main/July10NewKNN\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9bNfHTPSJ9e4",
        "outputId": "d7352fd2-fdf4-4914-bc65-c3060804aa7c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "absorption1_pred=\n",
            "[ 0.3571392573612607,0.35776285975576755,0.44762787680365657,0.5231744644680406,0.513043277900278,0.505726527,0.505726527,0.505726527,0.505726527,0.505726527,0.5057265269999999,0.505726527,0.505726527,0.505726527,0.505726527,0.505726527,0.505726527,0.5057265270000001,0.5057265269999999,0.505726527,0.5057265269999999,0.505726527,0.505726527,0.40960867461134937,0.40985266360655304,0.40789682693472135,0.40677156959632094,0.40236969973096626,0.505726527,0.40194477567977205,0.30213818031824874,0.39455947588736473,0.38923049648776076,0.2790522556187511,0.28367123918801146,0.27833803613418107,0.27362459448587056,0.270725451873492,0.3026915892377658,0.24534283773365612,0.2083916898200361,0.0318678935605089,0.26363749233467415,0.5562395590175493,0.2845000623453506,0.2453149340578639,0.21963630258226774,0.0343704787383553,0.04617185991171803,0.08492334365592175,0.11630005536592286,0.06813687955521573,0.07832507769663527,0.09576826810981955,0.10943340165383732,0.10698009248856456,0.11931318987060552,0.1708370343651818,0.2312404110394385,0.2168440056979762,0.1339363941071431,0.27527365044695334,0.30887788675546285,0.440021554573358,0.4176464399912999,0.4524615543957751,0.4374398158408759,0.21280747432071173,0.28035482378339205,0.35140120725518925,0.7326958320542615,0.7291510223768487,0.6042177941846755,0.7403640823853319,0.7327762295023296,0.8055615454929582,0.6490492560859357,0.7245480087124527,0.7715042931488404,0.7344614139404341,0.7408981550752993,0.7669259765727967,0.6218322380735208,0.6928079809404778,0.6488737110506494,0.6170336434378714,0.798719757674554,0.6331648645944161,0.6139217245984628,0.5239933959287757,0.526522848000445,0.6683701673232422,0.6427927313029427,0.6722030994534047,0.6480307280728512,0.6246611514703019,0.6138422908006936,0.506020163554343,0.5582099904927051,0.5584509092938488,0.49695467814180644,0.6961428869146028,0.6772934086369466,0.5933460702032832,0.6305136742225892,0.41814827429921164,0.6867182554422829,0.5552536288977207,0.46777953048295356,0.5377043662617025,0.4379656182211088,0.5700621313809803,0.44562311822609046,0.5273925447303305,0.537733166546617,0.41627381488189197,0.5649540190252156,0.4588039294642722,0.6957717715764303,0.6100558606670755,0.4858189692836835,0.4211574476347264,0.504948692318572,0.5135866849540552,0.3974593241002855,0.6359651124056862,0.6098672909293882,0.748088627517233 ];\n",
            "absorption2_pred=\n",
            "[ 0.6311976956520662,0.5864091276063659,0.5997865456670126,0.5014635213412962,0.44719387156689133,0.3956661700975953,0.36268018039720445,0.30759088351440145,0.18042627688752544,0.0973709040739992,0.13564332805351825,0.2468423545329126,0.23846636453552492,0.2629291534233989,0.38373028986931434,0.41381935773162654,0.4762675624014129,0.5302775600701367,0.6739708773770192,0.6201127838031703,0.5331543395434375,0.32450980336685653,0.3024686125458539,0.3410024148997467,0.42221405063800943,0.5023138461683602,0.3555061786045958,0.3912550163415371,0.4722251754150184,0.3524609453027698,0.2366262248449333,0.2487184989613747,0.29084199113214837,0.2669621392693837,0.2520368172201788,0.2719861995646397,0.26048729174507884,0.22680539554476983,0.1995675577232053,0.24905016363802032,0.2500851427078559,0.11527411517561656,0.29106790692709267,0.6519605312680101,0.42625347394774754,0.38427545935380364,0.31497842837410306,0.4556863707622358,0.5236281769945922,0.38001528249479544,0.46774889809361164,0.349919414000065,0.3206319562595685,0.2575740657675295,0.24728858200438664,0.19283482671121277,0.23493320323617303,0.2096812612642124,0.1652008058020271,0.1267149170468514,0.13458462192046713,0.12338686665847871,0.11728191749125808,0.20436333925791464,0.19456640742362766,0.1895002249148645,0.16344520296323709,0.09585731230914717,0.08516696628502907,0.104992043245199,0.17145713026624743,0.2680032832382435,0.20981892870318924,0.3397614571090249,0.366616421339088,0.37750353614850196,0.22489875163558498,0.27814151235396745,0.3641982423934884,0.4013720928384318,0.39807059137041,0.40640062991863485,0.4134054330236202,0.3799381181169469,0.5097921115461554,0.4902907904552001,0.5058413901897224,0.4441947902645335,0.3961227458604152,0.2683229126148143,0.16219932256037226,0.19380779039640175,0.18061635374382434,0.21762338261066513,0.21280923252018924,0.2021380902094371,0.1910084689947865,0.1782569052864544,0.17018245156541048,0.20390212350255266,0.205589742325497,0.19258266257824164,0.19229883671798895,0.17257310214140037,0.1728884629773276,0.16209331973455893,0.15027541112712406,0.13757725544597285,0.14101597523868242,0.12761479140820367,0.11917850450352965,0.11653916047515973,0.11468797244320098,0.11860437584879455,0.11742864761938593,0.11121986883406991,0.09948852425719543,0.10918291367407308,0.10384858889204691,0.10810607500663857,0.10422393604116308,0.11045996302209442,0.10910335423189164,0.103224114109747,0.10480686963735197,0.10587170683497084,0.10956200189797492,0.08117179202799987 ];\n",
            "most_frequent_side_label=\n",
            "Center\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import urllib\n",
        "import requests\n",
        "import numpy as np\n",
        "\n",
        "# Train set:\n",
        "# Load data from CSV file\n",
        "url = \"https://raw.githubusercontent.com/maryammomtahen/TrainSet/main/training%20data%20M.csv\"\n",
        "data = pd.read_csv(url)\n",
        "\n",
        "# Test set:\n",
        "# Load data from CSV file\n",
        "url = \"https://raw.githubusercontent.com/maryammomtahen/Testset/main/P48_S6_U_post.csv\"\n",
        "datatest = pd.read_csv(url)\n",
        "\n",
        "# Select features\n",
        "features = ['pixel', 'reflectance1', 'reflectance2']\n",
        "\n",
        "X_train = data[features]\n",
        "y_train = data[['absorption1', 'absorption2', 'side']]\n",
        "\n",
        "X_test = datatest[features]\n",
        "\n",
        "# Normalize the features using MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "# Create and train the KNN regressor with weighted distances\n",
        "k = 4  # Number of nearest neighbors to consider\n",
        "weights = 'distance'  # Weight points by the inverse of their distance\n",
        "regressor = KNeighborsRegressor(n_neighbors=k, weights=weights)\n",
        "regressor.fit(X_train_scaled, y_train)\n",
        "\n",
        "# Predict on the test dataset using the test set features\n",
        "y_pred = regressor.predict(X_test_scaled)\n",
        "\n",
        "# Separate the predicted values for absorption1, absorption2, and side\n",
        "absorption1_pred = y_pred[:, 0]  # Predicted absorption1 values\n",
        "absorption2_pred = y_pred[:, 1]  # Predicted absorption2 values\n",
        "side_pred = y_pred[:, 2]  # Predicted side values\n",
        "\n",
        "# Find the most frequent side value\n",
        "most_frequent_side = np.round(np.mean(side_pred)).astype(int)\n",
        "\n",
        "# Map the most frequent side value to the corresponding label\n",
        "side_label = \"\"\n",
        "if most_frequent_side == 0:\n",
        "    side_label = \"Left\"\n",
        "elif most_frequent_side == 1:\n",
        "    side_label = \"Center\"\n",
        "elif most_frequent_side == 2:\n",
        "    side_label = \"Right\"\n",
        "\n",
        "print(\"absorption1_pred=\")  # Predicted values for absorption1\n",
        "print('[', ','.join(str(value) for value in absorption1_pred), '];')\n",
        "print(\"absorption2_pred=\")  # Predicted values for absorption2\n",
        "print('[', ','.join(str(value) for value in absorption2_pred), '];')\n",
        "print(\"most_frequent_side_label=\")  # Most frequent predicted side label\n",
        "print(side_label)\n"
      ]
    }
  ]
}